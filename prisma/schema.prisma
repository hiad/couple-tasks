// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode      = "prisma"
}

model Task {
    id          Int      @id @default(autoincrement())
    task        String
    check       Boolean
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    types       Type[]
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String

    @@index([id])
    @@index([createdById])
}

model Type {
    id   Int    @id @default(autoincrement())
    type String

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    Task        Task?  @relation(fields: [taskId], references: [id])
    taskId      Int?

    @@index([id])
    @@index([createdById])
    @@index([taskId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String? @db.Text
    scope             String? @db.Text
    id_token          String? @db.Text
    session_state     String? @db.Text
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?   @db.Text
    email         String?   @unique
    emailVerified DateTime?
    image         String?   @db.Text
    accounts      Account[]
    sessions      Session[]
    tasks         Task[]
    Type          Type[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
